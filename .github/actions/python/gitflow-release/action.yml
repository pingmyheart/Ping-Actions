name: Python Release Action

runs:
  using: composite

  steps:
    - name: Configure Git
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get release version from pom.xml
      shell: bash
      id: get_release_version
      run: |
        release_version=$(python3 setup.py --version)
        clean_version=$(echo $release_version | sed 's/\.dev.*//')
        echo "RELEASE_VERSION=$clean_version" >> $GITHUB_ENV
        echo "Release version is $clean_version"

    - name: Set final release version (remove -SNAPSHOT)
      shell: bash
      run: |
        if [ -f __version__.py]; then
          sed -i -E 's|version.*|version = "${{ env.RELEASE_VERSION }}"|g' __version__.py
        elif [ -f setup.py ]; then
          sed -i "s/version.*/version='${{ env.RELEASE_VERSION }}',/" setup.py
        else
          echo "No version file found. Cannot set release version."
          exit 1
        fi

    - name: Commit and push release version
      shell: bash
      run: |
        git add .
        git commit -m "[GITHUB ACTION] - Set Release version to ${{ env.RELEASE_VERSION }}"
        git push origin HEAD

    - name: Merge release into main
      shell: bash
      run: |
        git fetch origin main
        git checkout ${{ github.ref_name }}
        git push origin HEAD:main --force

    - name: Tag main with release version
      shell: bash
      run: |
        git fetch origin main
        git checkout main
        git tag -a "v${{ env.RELEASE_VERSION }}" -m "Release version ${{ env.RELEASE_VERSION }}"
        git push origin main --tags

    - name: Checkout develop and bump patch version from release
      shell: bash
      run: |
        git fetch origin develop
        git checkout develop
        git pull origin develop
        
        # Extract version parts
        IFS='.' read -r major minor patch <<<"${{ env.RELEASE_VERSION }}"
        next_patch=$((patch + 1))
        next_version="${major}.${minor}.${next_patch}.dev0"
        
        if [ -f __version__.py]; then
          sed -i -E 's|version.*|version = "${next_version}"|g' __version__.py
        else
          sed -i -E "s/version.*/version='${next_version}',/" setup.py
        fi
        
        git add .
        git commit -m "[GITHUB ACTION] - Update version for next development"
        git push origin develop

    - name: Trigger default workflow on develop
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci.yml',
            ref: 'refs/heads/develop'
          });

    - name: Trigger default workflow on tag
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'ci.yml',
            ref: 'refs/tags/v${{ env.RELEASE_VERSION }}'
          });